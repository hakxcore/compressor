#!/usr/bin/env bash
# Author: Hakxcore https://github.com/hakxcore
configuredDownloadClient=""
configuredUploadClient=""
configuredClient=""
currentVersion="1.0.0"
down="false"
##Color
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')" 
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')"  BLACK="$(printf '\033[30m')"  
REDBG="$(printf '\033[41m')"  GREENBG="$(printf '\033[42m')"  ORANGEBG="$(printf '\033[43m')"  BLUEBG="$(printf '\033[44m')"  
MAGENTABG="$(printf '\033[45m')"  CYANBG="$(printf '\033[46m')"  WHITEBG="$(printf '\033[47m')"  BLACKBG="$(printf '\033[40m')" 
RESETBG="$(printf '\e[0m')"  BLINK="$(printf '\033[5;31m')"

##Platform Check
if [[ "$OSTYPE" == linux-android* ]]; then
  distro="termux"
  platform="Termux"
  prefix="/data/data/com.termux/files/"
  SUDO=""
fi

if [ -z "$distro" ]; then
  distro=$(ls /etc | awk 'match($0, "(.+?)[-_](?:release|version)", groups) {if(groups[1] != "os") {print groups[1]}}')
  platform="Debian"
  prefix=""
  SUDO="sudo"
fi

if [ -z "$distro" ]; then
  if [ -f "/etc/os-release" ]; then
    distro="$(source /etc/os-release && echo $ID)"
  elif [ "$OSTYPE" == "darwin" ]; then
    distro="darwin"
    platform="Darwin"
    prefix=""
    SUDO="sudo"
  else 
    distro="invalid"
  fi
fi

getConfiguredDownloadClient()
{
  if  command -v curl &>/dev/null; then
    configuredDownloadClient="curl"
  elif command -v wget &>/dev/null; then
    configuredDownloadClient="wget"
  elif command -v fetch &>/dev/null; then
    configuredDownloadClient="fetch"
  else
    echo "Error: Downloading with this tool requires either curl, wget, or fetch to be installed." >&2
    return 1
  fi
}

httpGet()
{
  case "$configuredClient" in
    curl)  curl -A curl -s "$@" ;;
    wget)  wget -qO- "$@" ;;
    httpie) http -b GET "$@" ;;
    fetch) fetch -q "$@" ;;
  esac
}


getConfiguredClient()
{
  if  command -v curl &>/dev/null; then
    configuredClient="curl"
  elif command -v wget &>/dev/null; then
    configuredClient="wget"
  elif command -v http &>/dev/null; then
    configuredClient="httpie"
  elif command -v fetch &>/dev/null; then
    configuredClient="fetch"
  else
    echo "Error: This tool requires either curl, wget, httpie or fetch to be installed." >&2
    return 1
  fi
}


getconfiguredUploadClient()
{
  if  command -v curl &>/dev/null; then
    configuredUploadClient="curl"
  elif command -v wget &>/dev/null; then
    configuredUploadClient="wget"
  else
    echo "Error: Uploading with this tool requires either curl or wget to be installed." >&2
    return 1
  fi
}

update()
{
  repositoryName="compress" 
  githubUserName="Hakxcore" 
  nameOfInstallFile="install" 
  latestVersion=$(httpGet https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+" ) #always grabs the tag without the v option

  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]]; then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]]; then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == [Yy] ]]; then
        cd ~ || { echo 'Update Failed'; exit 1; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName || { echo "Permissions Error: try running the update again"; exit 1; } ; fi
        echo -n "Downloading latest version of: $repositoryName."
        git clone -q "https://github.com/$githubUserName/$repositoryName" && touch .TSnippetsHiddenFile || { echo "Failure!"; exit 1; } &
        while [ ! -f .TSnippetsHiddenFile ]; do { echo -n "."; sleep 2; };done
        rm -f .TSnippetsHiddenFile
        echo "Success!"
        cd $repositoryName || { echo 'Update Failed'; exit 1; }
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."      
	      $SUDO ./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName || { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory again"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi
}

checkInternet()
{
  httpGet github.com > /dev/null 2>&1 || { echo "Error: no active internet connection" >&2; return 1; } # query github with a get request
}

cropImg()
{
  case "$configuredUploadClient" in
    curl) response=$(curl https://api.tinify.com/output/4cy062k0g67y1netfqw6bccg2z5m6mmc \
     --user api:nl8SmWKfYQwTj1Q81dTV2W7Gw1KtM14D \
     --header "Content-Type: application/json" \
     --data '{ "resize": { "method": "cover", "width": 600, "height": 500 } }' \
     --dump-header /dev/stdout --silent \
     --output thumbnail.jpg) || { echo "Failure!"; return 1;};;
    wget) response=$(wget --progress=dot --method PUT --body-file="$1" "https://free.keep.sh" | tee /dev/null) || { echo "Failure!"; return 1;} ;;
  esac
  echo  "$MAGENTA Success! $RESETBG"
}

compressImg()
{
  case "$configuredUploadClient" in
    curl) response=$(curl https://api.tinify.com/output/4cy062k0g67y1netfqw6bccg2z5m6mmc \
     --user api:nl8SmWKfYQwTj1Q81dTV2W7Gw1KtM14D \
     --header "Content-Type: application/json" \
     --data '{ "resize": { "method": "fit", "width": 600, "height": 500 } }' \
     --dump-header /dev/stdout --silent \
     --output thumbnail.jpg) || { echo "Failure!"; return 1;};;
    wget) response=$(wget --progress=dot --method PUT --body-file="$1" "https://free.keep.sh" | tee /dev/null) || { echo "Failure!"; return 1;} ;;
  esac
  echo  "$MAGENTA Success! $RESETBG"
}

scaleImg()
{
  case "$configuredUploadClient" in
    curl) response=$(curl https://api.tinify.com/output/4cy062k0g67y1netfqw6bccg2z5m6mmc \
     --user api:nl8SmWKfYQwTj1Q81dTV2W7Gw1KtM14D \
     --header "Content-Type: application/json" \
     --data '{ "resize": { "method": "scale", "width": 600, "height": 500 } }' \
     --dump-header /dev/stdout --silent \
     --output thumbnail.jpg) || { echo "Failure!"; return 1;};;
    wget) response=$(wget --progress=dot --method PUT --body-file="$1" "https://free.keep.sh" | tee /dev/null) || { echo "Failure!"; return 1;} ;;
  esac
  echo  "$MAGENTA Success! $RESETBG"
}

removeBackgroundImg()
{
  case "$configuredUploadClient" in
    curl) response=$(curl https://api.tinify.com/output/4cy062k0g67y1netfqw6bccg2z5m6mmc \
     --user api:nl8SmWKfYQwTj1Q81dTV2W7Gw1KtM14D \
     --header "Content-Type: application/json" \
     --data '{ "resize": { "method": "thumb", "width": 600, "height": 500 } }' \
     --dump-header /dev/stdout --silent \
     --output thumbnail.jpg) || { echo "Failure!"; return 1;};;
    wget) response=$(wget --progress=dot --method PUT --body-file="$1" "https://free.keep.sh" | tee /dev/null) || { echo "Failure!"; return 1;} ;;
  esac
  echo  "$MAGENTA Success! $RESETBG"
}



##Print upload response after 
printUploadResponse()
{
fileID=$(echo $response | cut -d "/" -f 4)
echo " $BLUE>"$RESETBG"Transfer Download Command: $GREEN transfer -d $fileID $tempFileName$RESETBG"
echo " $BLUE>"$RESETBG"Transfer File URL:$GREEN$response$RESETBG"
# echo "$RED""Or scan this QR-Code"$RESETBG
echo -e "\n\n\t Or scan this QR Code"
qrify $response
}


##Download file from the link
httpDownload()
{
  # if [[ -d Trans-download ]]; then
  #   echo "Downloading....."
  #   else
  #     mkdir Trans-download
  # fi
  echo "Downloading....."

  # https://free.keep.sh/9ab64df49d/your-file.txt > your-file.
  curl -s -L https://free.keep.sh/$1/$2 > $inputFileName || echo "Failure";
  # curl -A curl -s https://transfer.sh/$2 -o Trans-download/$2 || echo "Failure";  
 echo "$BLUE""File saved"$RESETBG
}

##Usage and Help
usage()
{
  cat <<EOF
compress

Description: compress is used to compress the images like png and jpg according to you, using command line.

Usage: compress [flags] <img-file>
  -d  Download the file
  -c  compress the file
  -s  Scales the image down proportionally. 
      You must provide either a target width or a target height,
      but not both. The scaled image will have exactly the 
      provided width or height.

  -x  Scales the image proportionally and crops it if necessary 
  	  so that the result has exactly the given dimensions.
  	  You must provide both a width and a height. 
  	  Which parts of the image are cropped away is determined automatically.
  	  An intelligent algorithm determines the most important areas of your image.

  -b  Detect cut out images with plain backgrounds. 
      The image is scaled down to the width and height you provide.
      If an image is detected with a free standing object it will
      add more background space where necessary or crop the unimportant parts. 

  -w  width of the image that want to set
  -h  height of the image that you want to set
  -u  Update Termux-snippets Tools
  -h  Show the help
  -v  Get the tool version
Examples:
  compress -c file.png
  compress -d <link>
  compress -c file.jpg -w 300 -h 450
EOF
}

##Options(flags)
while getopts "c:d:wh:uvh" opt; do
  case "$opt" in
    \?) echo "Invalid option: -$OPTARG" >&2
      exit 1
    ;;
    h)  usage
      exit 0
    ;;
    v)  echo "Version $currentVersion"
      exit 0
    ;;
    u)
      getConfiguredClient || exit 1
      checkInternet || exit 1
      update || exit 1
      exit 0
    ;;
    c)
      compressImg 
    ;;
    d)
      down="true"
      if [ $# -lt 3 ];then { echo "Error: not enough arguments for downloading a file, see the usage"; return 1;};fi
      if [ $# -gt 3 ];then { echo "Error: to many enough arguments for downloading a file, see the usage"; return 1;};fi
      inputId=$2 #(echo "$*" | sed s/-d//g | sed s/-o//g | cut -d " " -f 2)
      inputFileName=$3 #(echo "$*" | sed s/-d//g | sed s/-o//g | cut -d " " -f 3)
      httpDownload $inputId $inputFileName
    ;;
    :)  echo "Option -$OPTARG requires an argument." >&2
      exit 1
    ;;
  esac
done

##Driver
if [[ $# == "0" ]]; then
  usage
  exit 0
elif [[ $# == "1" ]];then
  if [[ $1 == "help" ]]; then
    usage
    exit 0
  elif [[ $1 == "update" ]]; then
    getConfiguredClient || exit 1
    checkInternet || exit 1
    update || exit 1
    exit 0
  elif [ -f $1 ];then
    getConfiguredClient || exit 1
    checkInternet || exit 1
    getconfiguredUploadClient || exit 1
    singleUpload "$1" || exit 1
    printUploadResponse
    exit 0
  else
    echo "Error: invalid filepath"
    exit 1
  fi
else
  if $down && ! $onetime ;then
    getConfiguredClient || exit 1
    checkInternet || exit 1
    getConfiguredDownloadClient || exit 1
    singleDownload "$inputFilePath" "$inputID" "$inputFileName" || exit 1
    exit 0
  elif ! $down && ! $onetime; then
    getConfiguredClient || exit 1
    checkInternet || exit 1
    getconfiguredUploadClient || exit 1
    for path in "$@";do
      singleUpload "$path" || exit 1
      printUploadResponse
      echo
    done
    exit 0
  elif ! $down && $onetime; then
    getConfiguredClient || exit 1
    if [[ $configuredClient -ne "curl" ]];then
      echo "Error: curl must be installed to use one time file upload"
      exit 1
    fi
    inputFileName=$(echo "$*" | sed s/-o//g | cut -d " " -f 2 )
    onetimeUpload "$inputFileName"
    printOntimeUpload
  fi
fi
